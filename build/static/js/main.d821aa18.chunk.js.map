{"version":3,"sources":["RequestForm.js","App.js","reportWebVitals.js","index.js"],"names":["RequestForm","React","useState","response","setResponse","url","setUrl","hasError","setHasError","type","autoComplete","onChange","e","target","value","placeholder","onClick","axios","get","then","console","log","catch","error","style","color","JSON","stringify","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAuCeA,EApCK,WAChB,MAAgCC,IAAMC,SAAS,MAA/C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsBH,IAAMC,SAAS,IAArC,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAAgCL,IAAMC,UAAS,GAA/C,mBAAOK,EAAP,KAAiBC,EAAjB,KAgBA,OACI,gCACI,uBAAOC,KAAK,OAAOC,cAAY,EAACC,SAAU,SAAAC,GAAC,OAAIN,EAAOM,EAAEC,OAAOC,QAAQC,YAAY,uBACnF,wBAAQC,QAjBK,WACXX,GACFY,IAAMC,IAAIb,GAAKc,MAAK,SAAAhB,GAChBK,GAAY,GACZJ,EAAYD,GACZiB,QAAQC,IAAIlB,MACbmB,OAAM,SAAAC,GACLf,GAAY,GACZJ,EAAYmB,GACZH,QAAQC,IAAIE,OAQhB,kBAEIpB,EACI,qCACI,uBACA,uBACA,qBAAIqB,MAAO,CAAEC,MAAOlB,EAAW,MAAQ,SAAvC,UAAmDA,EAAW,QAAU,WAAxE,QACA,4BAAImB,KAAKC,UAAUxB,QACjB,SCtBXyB,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d821aa18.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport React from 'react'\r\n\r\nconst RequestForm = () => {\r\n    const [response, setResponse] = React.useState(null)\r\n    const [url, setUrl] = React.useState('')\r\n    const [hasError, setHasError] = React.useState(false)\r\n\r\n    const handleSubmit = () => {\r\n        if (!!url) {\r\n            axios.get(url).then(response => {\r\n                setHasError(false)\r\n                setResponse(response)\r\n                console.log(response)\r\n            }).catch(error => {\r\n                setHasError(true)\r\n                setResponse(error)\r\n                console.log(error)\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input type='text' autoComplete onChange={e => setUrl(e.target.value)} placeholder='Paste GET url here' />\r\n            <button onClick={handleSubmit}>Test</button>\r\n            {\r\n                response ?\r\n                    <>\r\n                        <br />\r\n                        <br />\r\n                        <h3 style={{ color: hasError ? 'red' : 'green' }}>{hasError ? 'Error' : 'Response'}:-</h3>\r\n                        <p>{JSON.stringify(response)}</p>\r\n                    </> : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RequestForm\r\n","import './App.css';\nimport RequestForm from './RequestForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RequestForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}